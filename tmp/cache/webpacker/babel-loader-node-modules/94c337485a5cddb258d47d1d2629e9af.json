{"ast":null,"code":"var _jsxFileName = \"/Users/anastasiakazmina/hseadc2017_thereminvox2copy/app/javascript/components/effects/PitchShift.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport PlaySwitch from '../PlaySwitch';\nimport PlaySwitch_tri from '../PlaySwitch_tri';\nimport ToggleSwitch from '../ToggleSwitch';\nimport Slider from '../Slider';\nimport Knob from '../Knob';\n\nvar PitchShift =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PitchShift, _React$Component);\n\n  function PitchShift(props) {\n    _classCallCheck(this, PitchShift);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PitchShift).call(this, props));\n  }\n\n  _createClass(PitchShift, [{\n    key: \"render\",\n    value: function render() {\n      var name = 'pitchShift';\n      var _this$props = this.props,\n          effect = _this$props.effect,\n          wet = _this$props.wet,\n          on = _this$props.on,\n          toggleEffect = _this$props.toggleEffect,\n          changeEffectWetValue = _this$props.changeEffectWetValue,\n          changePitchShiftValue = _this$props.changePitchShiftValue;\n      return React.createElement(\"div\", {\n        className: \"Effect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Pitch Shift\"), React.createElement(\"div\", {\n        className: \"controlsContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"controlsRow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Wet\"), React.createElement(Slider, {\n        name: name,\n        min: \"0\",\n        max: \"1\",\n        value: wet,\n        handleValueChange: changeEffectWetValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"controlsRow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Pitch Shift\"), React.createElement(Slider, {\n        name: name,\n        min: \"0\",\n        max: \"100\",\n        on: on,\n        value: effect.pitchShift,\n        handleValueChange: changePitchShiftValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }))), React.createElement(ToggleSwitch, {\n        value: \"PitchShift\",\n        current: on,\n        handleClick: toggleEffect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PitchShift;\n}(React.Component);\n\nexport { PitchShift as default };","map":{"version":3,"sources":["/Users/anastasiakazmina/hseadc2017_thereminvox2copy/app/javascript/components/effects/PitchShift.jsx"],"names":["React","PlaySwitch","PlaySwitch_tri","ToggleSwitch","Slider","Knob","PitchShift","props","name","effect","wet","on","toggleEffect","changeEffectWetValue","changePitchShiftValue","pitchShift","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB;;IAEqBC,U;;;;;AACnB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,mFACXA,KADW;AAElB;;;;6BAEQ;AACP,UAAIC,IAAI,GAAG,YAAX;AADO,wBASH,KAAKD,KATF;AAAA,UAGLE,MAHK,eAGLA,MAHK;AAAA,UAILC,GAJK,eAILA,GAJK;AAAA,UAKLC,EALK,eAKLA,EALK;AAAA,UAMLC,YANK,eAMLA,YANK;AAAA,UAOLC,oBAPK,eAOLA,oBAPK;AAAA,UAQLC,qBARK,eAQLA,qBARK;AAWP,aACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAGE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAGE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAEN,IADR;AAEE,QAAA,GAAG,EAAC,GAFN;AAGE,QAAA,GAAG,EAAC,GAHN;AAIE,QAAA,KAAK,EAAEE,GAJT;AAKE,QAAA,iBAAiB,EAAEG,oBALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF,EAaE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAEL,IADR;AAEE,QAAA,GAAG,EAAC,GAFN;AAGE,QAAA,GAAG,EAAC,KAHN;AAIE,QAAA,EAAE,EAAEG,EAJN;AAKE,QAAA,KAAK,EAAEF,MAAM,CAACM,UALhB;AAME,QAAA,iBAAiB,EAAED,qBANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAbF,CAHF,EA4BE,oBAAC,YAAD;AACE,QAAA,KAAK,EAAC,YADR;AAEE,QAAA,OAAO,EAAEH,EAFX;AAGE,QAAA,WAAW,EAAEC,YAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5BF,CADF;AAoCD;;;;EApDqCZ,KAAK,CAACgB,S;;SAAzBV,U","sourcesContent":["import React from 'react'\n\nimport PlaySwitch from '../PlaySwitch'\nimport PlaySwitch_tri from '../PlaySwitch_tri'\nimport ToggleSwitch from '../ToggleSwitch'\nimport Slider from '../Slider'\nimport Knob from '../Knob'\n\nexport default class PitchShift extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let name = 'pitchShift'\n    const {\n      effect,\n      wet,\n      on,\n      toggleEffect,\n      changeEffectWetValue,\n      changePitchShiftValue\n    } = this.props\n\n    return (\n      <div className=\"Effect\">\n        <h1>Pitch Shift</h1>\n\n        <div className=\"controlsContainer\">\n          <div className=\"controlsRow\">\n            <h2>Wet</h2>\n\n            <Slider\n              name={name}\n              min=\"0\"\n              max=\"1\"\n              value={wet}\n              handleValueChange={changeEffectWetValue}\n            />\n          </div>\n\n          <div className=\"controlsRow\">\n            <h2>Pitch Shift</h2>\n            <Slider\n              name={name}\n              min=\"0\"\n              max=\"100\"\n              on={on}\n              value={effect.pitchShift}\n              handleValueChange={changePitchShiftValue}\n            />\n          </div>\n        </div>\n        <ToggleSwitch\n          value=\"PitchShift\"\n          current={on}\n          handleClick={toggleEffect}\n        />\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}